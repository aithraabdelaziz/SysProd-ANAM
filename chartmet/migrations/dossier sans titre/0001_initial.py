# Generated by Django 5.1.8 on 2025-04-26 23:33

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0027_image_description'),
    ]

    operations = [
        migrations.CreateModel(
            name='ParametreMeteo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('unite', models.CharField(blank=True, max_length=20)),
                ('type_affichage', models.CharField(choices=[('ICONE', 'Icône'), ('VALEUR', 'Valeur numérique'), ('SYMBOLE', 'Symbole'), ('TEXTE', 'Texte descriptif'), ('BARRE', 'Barre colorée')], max_length=20)),
                ('couleur_defaut', models.CharField(default='#000000', max_length=7)),
                ('ordre_affichage', models.IntegerField(default=0)),
                ('visibilite_defaut', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ShapefileZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, verbose_name='Nom de la zone')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('fichier', models.FileField(upload_to='shapefiles/', verbose_name='Fichier Shapefile (.shp)')),
                ('fichiers_associes', models.FileField(blank=True, help_text='Archive ZIP contenant tous les fichiers nécessaires', upload_to='shapefiles/', verbose_name='Fichiers associés (.shx, .dbf, etc.)')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('date_import', models.DateTimeField(auto_now_add=True)),
                ('auteur', models.CharField(blank=True, max_length=100)),
                ('niveau_zoom', models.IntegerField(default=6, help_text='Niveau de zoom recommandé pour cette zone')),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('position', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Position (lon/lat)')),
                ('altitude', models.FloatField(blank=True, null=True, verbose_name='Altitude (m)')),
                ('region', models.CharField(blank=True, max_length=100)),
                ('pays', models.CharField(blank=True, max_length=100)),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
            ],
        ),
        migrations.CreateModel(
            name='CarteConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_frame', models.PositiveSmallIntegerField(default=0, help_text='Valeur entre 00 et 340', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(340)], verbose_name='Frame de début')),
                ('end_frame', models.PositiveSmallIntegerField(default=340, help_text='Valeur entre 00 et 340', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(340)], verbose_name='Frame de fin')),
                ('fond_carte', models.CharField(choices=[('UNI', 'Couleur unie'), ('DEGRADE', 'Dégradé de couleurs'), ('SATELLITE', 'Image satellite'), ('TOPographique', 'Topographique'), ('CUSTOM', 'Image personnalisée')], default='UNI', max_length=20, verbose_name='Type de fond de carte')),
                ('fond_couleur', models.CharField(default='#FFFFFF', max_length=7, verbose_name='Couleur de fond')),
                ('resolution_width', models.IntegerField(default=1920, verbose_name='Largeur (px)')),
                ('resolution_height', models.IntegerField(default=1080, verbose_name='Hauteur (px)')),
                ('projection', models.CharField(choices=[('MERCATOR', 'Mercator'), ('LAMBERT', 'Lambert'), ('POLAIRE', 'Polaire'), ('WGS84', 'WGS84')], default='WGS84', max_length=20, verbose_name='Projection cartographique')),
                ('echelle', models.CharField(blank=True, max_length=100, verbose_name='Échelle de la carte')),
                ('legendes', wagtail.fields.RichTextField(blank=True, verbose_name='Configuration des légendes')),
                ('notes', wagtail.fields.RichTextField(blank=True, verbose_name='Notes supplémentaires')),
                ('fond_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Image de fond personnalisée')),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Logo à afficher')),
                ('shapefile_zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chartmet.shapefilezone', verbose_name='Zone géographique (shapefile)')),
            ],
        ),
    ]
