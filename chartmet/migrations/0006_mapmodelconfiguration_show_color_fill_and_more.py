# Generated by Django 5.1.8 on 2025-05-14 17:38

import chartmet.models
import colorfield.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chartmet', '0005_mapmodelconfiguration'),
        ('forecast', '0013_remove_zone_unique_name_category_alter_zone_category'),
    ]

    operations = [
        migrations.AddField(
            model_name='mapmodelconfiguration',
            name='show_color_fill',
            field=models.BooleanField(default=True, help_text='Afficher le remplissage coloré (contourf)', verbose_name='Afficher le remplissage coloré'),
        ),
        migrations.AddField(
            model_name='mapmodelconfiguration',
            name='show_contour_lines',
            field=models.BooleanField(default=False, help_text='Afficher les lignes de contour (contour)', verbose_name='Afficher les lignes de contour'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='active',
            field=models.BooleanField(default=False, help_text='Activer cette configuration.', verbose_name='Activer'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='border_edgecolor',
            field=colorfield.fields.ColorField(default='#000000', help_text='Couleur du contour extérieur.', image_field=None, max_length=25, samples=None, verbose_name='Couleur du contour extérieur'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='border_linewidth',
            field=models.FloatField(default=0.8, help_text='Épaisseur du contour extérieur (0.1 à 10.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)], verbose_name='Épaisseur du contour extérieur'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='cmap',
            field=models.CharField(choices=[], default='viridis', help_text='Palette de couleur', verbose_name='Palette de couleurs'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='facecolor',
            field=colorfield.fields.ColorField(default='#FFFFFF', help_text='Couleur de fond général de la carte.', image_field=None, max_length=25, samples=None, verbose_name='Couleur de fond'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='intern_edgecolor',
            field=colorfield.fields.ColorField(default='#808080', help_text='Couleur des lignes internes.', image_field=None, max_length=25, samples=None, verbose_name='Couleur des lignes internes'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='intern_linewidth',
            field=models.FloatField(default=0.3, help_text='Épaisseur des lignes internes (0.1 à 5.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5.0)], verbose_name='Épaisseur des lignes internes'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='interpolation_method',
            field=models.CharField(choices=[('linear', 'Linéaire'), ('nearest', 'Voisin le plus proche'), ('cubic', 'Cubique')], default='linear', verbose_name="Méthode d'interpolation"),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='localites',
            field=models.ManyToManyField(blank=True, help_text='Zones à afficher comme villes sur la carte', limit_choices_to={'category': 'ville'}, related_name='villes_map_configurations', to='forecast.zone', verbose_name='Villes affichées'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='min_dist',
            field=models.FloatField(default=50, help_text='Distance minimale entre étiquettes (10 à 300 km).', validators=[django.core.validators.MinValueValidator(10.0), django.core.validators.MaxValueValidator(300.0)], verbose_name='Distance minimale entre étiquettes'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='name',
            field=models.CharField(default='Carte par défaut', max_length=100, unique=True, verbose_name='Nom de la configuration'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='orientation_palette',
            field=models.CharField(choices=[('horizontal', 'Horizontale'), ('vertical', 'Verticale')], default='horizontal', help_text='Orientation de la palette de couleur', verbose_name='Orientation de la palette'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='titre_backgroundcolor',
            field=colorfield.fields.ColorField(default='#FFFFFF', help_text='Couleur de fond du titre.', image_field=None, max_length=25, samples=None, verbose_name='Couleur de fond du titre'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='titre_carte',
            field=models.CharField(default='Carte de prévision', max_length=255, verbose_name='Titre de la carte'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='titre_date',
            field=models.BooleanField(default=True, help_text='Afficher la date sous le titre.', verbose_name='Afficher la date'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='titre_fontsize',
            field=models.PositiveIntegerField(default=14, help_text='Taille de police du titre (8 à 48).', validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(48)], verbose_name='Taille de la police du titre'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='titre_pad',
            field=models.PositiveIntegerField(default=20, help_text='Marge verticale sous le titre (0 à 100 px).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Marge sous le titre'),
        ),
        migrations.AlterField(
            model_name='mapmodelconfiguration',
            name='zip_file',
            field=models.FileField(help_text='Fichier ZIP contenant le shapefile.', upload_to=chartmet.models.shapefile_upload_path, verbose_name='Fichier Shapefile (ZIP)'),
        ),
    ]
