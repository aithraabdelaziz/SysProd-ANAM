# Generated by Django 5.1.8 on 2025-05-13 05:42

import chartmet.models
import colorfield.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chartmet', '0004_alter_mapfcstconfiguration_name_and_more'),
        ('forecast', '0013_remove_zone_unique_name_category_alter_zone_category'),
    ]

    operations = [
        migrations.CreateModel(
            name='MapModelConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Carte par defaut', max_length=100, unique=True)),
                ('zip_file', models.FileField(help_text='Fichier ZIP contenant le shapefile.', upload_to=chartmet.models.shapefile_upload_path)),
                ('facecolor', colorfield.fields.ColorField(default='#FFFFFF', help_text='Couleur de fond général de la carte.', image_field=None, max_length=25, samples=None)),
                ('intern_edgecolor', colorfield.fields.ColorField(default='#808080', help_text='Couleur des lignes internes.', image_field=None, max_length=25, samples=None)),
                ('intern_linewidth', models.FloatField(default=0.3, help_text='Épaisseur des lignes internes (0.1 à 5.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5.0)])),
                ('border_edgecolor', colorfield.fields.ColorField(default='#000000', help_text='Couleur du contour extérieur.', image_field=None, max_length=25, samples=None)),
                ('border_linewidth', models.FloatField(default=0.8, help_text='Épaisseur du contour extérieur (0.1 à 10.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('cmap', models.CharField(choices=[('viridis', 'couleurs perceptuellement uniformes'), ('plasma', 'couleurs perceptuellement uniformes, chaud'), ('inferno', 'couleurs perceptuellement uniformes, sombre à lumineux'), ('magma', 'couleurs perceptuellement uniformes, chaud et doux'), ('cividis', 'couleurs perceptuellement uniformes, pour daltoniens'), ('Blues', 'palette séquentielle, bleu clair au bleu foncé'), ('BuGn', 'palette séquentielle, bleu au vert'), ('Oranges', 'palette séquentielle, jaune clair au orange'), ('Purples', 'palette séquentielle, violet clair au violet foncé'), ('coolwarm', 'palette divergente, bleu froid au rouge chaud'), ('RdBu', 'palette divergente, bleu au rouge'), ('seismic', 'palette divergente, bleu foncé au rouge foncé'), ('hsv', 'palette cyclique, spectre de couleurs saturé'), ('twilight', 'palette cyclique'), ('twilight_shifted', 'palette cyclique décalée'), ('Set1', 'palette discrète, 10 couleurs distinctes'), ('Set2', 'palette discrète, 8 couleurs distinctes'), ('Set3', 'palette discrète, 12 couleurs distinctes'), ('Pastel1', 'palette discrète, couleurs pastel'), ('Paired', 'palette discrète, couleurs en paire'), ('gray', 'échelle de gris'), ('cividis', 'palette perceptuellement uniforme adaptée aux daltoniens'), ('spring', 'palette inspirée du printemps, couleur vive'), ('summer', "palette inspirée de l'été, verte à jaune"), ('autumn', "palette inspirée de l'automne, orange à rouge"), ('winter', "palette inspirée de l'hiver, bleu à vert")], default='linear', help_text='Palette de couleur')),
                ('orientation_palette', models.CharField(choices=[('horizontal', 'Horizontale'), ('vertical', 'Verticale')], default='horizontal', help_text='Orientation de la Palette de couleur')),
                ('min_dist', models.FloatField(default=50, help_text='Distance minimale entre étiquettes (10 à 300km).', validators=[django.core.validators.MinValueValidator(10.0), django.core.validators.MaxValueValidator(300.0)])),
                ('titre_carte', models.CharField(default='Carte de prévision', max_length=255)),
                ('titre_date', models.BooleanField(default=True, help_text='Afficher la date sous le titre.')),
                ('titre_fontsize', models.PositiveIntegerField(default=14, help_text='Taille de police du titre (8 à 48).', validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(48)])),
                ('titre_pad', models.PositiveIntegerField(default=20, help_text='Marge verticale sous le titre (0 à 100 px).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('titre_backgroundcolor', colorfield.fields.ColorField(default='#FFFFFF', help_text='Couleur de fond du titre.', image_field=None, max_length=25, samples=None)),
                ('active', models.BooleanField(default=False, help_text='Activer cette configuration.')),
                ('interpolation_method', models.CharField(choices=[('linear', 'Linéaire'), ('nearest', 'Par voisin le plus proche'), ('cubic', 'Cubique')], default='linear')),
                ('localites', models.ManyToManyField(blank=True, help_text='Zones à afficher dans la carte comme indication des villes', limit_choices_to={'category': 'ville'}, related_name='villes_map_configurations', to='forecast.zone')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
