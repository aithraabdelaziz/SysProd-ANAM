# Generated by Django 5.1.8 on 2025-05-28 23:43

import chartmet.models
import colorfield.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('bulletins', '0047_alter_bulletintemplate_content'),
        ('chartmet', '0018_alter_mapmodelconfiguration_extrapolate'),
        ('forecast', '0013_remove_zone_unique_name_category_alter_zone_category'),
        ('observation', '0005_alter_station_options'),
    ]

    operations = [
        migrations.CreateModel(
            name='MapSpatialConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Carte par défaut', max_length=100, unique=True, verbose_name='Nom de la configuration')),
                ('zip_file', models.FileField(help_text='Fichier ZIP contenant le shapefile.', upload_to=chartmet.models.shapefile_upload_path, verbose_name='Fichier Shapefile (ZIP)')),
                ('facecolor', colorfield.fields.ColorField(default='#FFFFFF', help_text='Couleur de fond général de la carte.', image_field=None, max_length=25, samples=None, verbose_name='Couleur de fond')),
                ('intern_edgecolor', colorfield.fields.ColorField(default='#808080', help_text='Couleur des lignes internes.', image_field=None, max_length=25, samples=None, verbose_name='Couleur des lignes internes')),
                ('intern_linewidth', models.FloatField(default=0.3, help_text='Épaisseur des lignes internes (0.1 à 5.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5.0)], verbose_name='Épaisseur des lignes internes')),
                ('border_edgecolor', colorfield.fields.ColorField(default='#000000', help_text='Couleur du contour extérieur.', image_field=None, max_length=25, samples=None, verbose_name='Couleur du contour extérieur')),
                ('border_linewidth', models.FloatField(default=0.8, help_text='Épaisseur du contour extérieur (0.1 à 10.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)], verbose_name='Épaisseur du contour extérieur')),
                ('min_dist', models.FloatField(default=50, help_text='Distance minimale entre étiquettes (10 à 300 km).', validators=[django.core.validators.MinValueValidator(10.0), django.core.validators.MaxValueValidator(300.0)], verbose_name='Distance minimale entre étiquettes')),
                ('largeur', models.FloatField(default=6.4, help_text='Largeur de la carte (5.1 à 20.0 pouces)', validators=[django.core.validators.MinValueValidator(5.0), django.core.validators.MaxValueValidator(20.0)], verbose_name='Largeur de la carte')),
                ('hauteur', models.FloatField(default=6.4, help_text='Hauteur de la carte (5.1 à 20.0 pouces)', validators=[django.core.validators.MinValueValidator(5.0), django.core.validators.MaxValueValidator(20.0)], verbose_name='Hauteur de la carte')),
                ('cmap', models.CharField(choices=[('viridis', 'viridis : uniforme'), ('plasma', 'plasma : chaud'), ('inferno', 'inferno : lumineux'), ('magma', 'magma : doux'), ('cividis', 'cividis : daltoniens'), ('Blues', 'Blues : bleu foncé'), ('BuGn', 'BuGn : bleu-vert'), ('Oranges', 'Oranges : orange'), ('Purples', 'Purples : violet'), ('coolwarm', 'coolwarm : bleu-rouge'), ('RdBu', 'RdBu : rouge-bleu'), ('seismic', 'seismic : extrêmes'), ('hsv', 'hsv : arc-en-ciel'), ('twilight', 'twilight : cyclique'), ('twilight_shifted', 'twilight_shifted : cyclique 2'), ('Set1', 'Set1 : 10 couleurs'), ('Set2', 'Set2 : 8 couleurs'), ('Set3', 'Set3 : 12 couleurs'), ('Pastel1', 'Pastel1 : pastel'), ('Paired', 'Paired : en paire'), ('gray', 'gray : niveaux gris'), ('spring', 'spring : vive'), ('summer', 'summer : vert-jaune'), ('autumn', 'autumn : orange-rouge'), ('winter', 'winter : bleu-vert')], default='viridis', help_text='Palette de couleur. Consultez la <a href="https://matplotlib.org/stable/gallery/color/colormap_reference.html" target="_blank" rel="noopener noreferrer">référence des palettes matplotlib</a>.', verbose_name='Palette de couleurs')),
                ('orientation_palette', models.CharField(choices=[('horizontal', 'Horizontale'), ('vertical', 'Verticale')], default='horizontal', help_text='Orientation de la palette de couleur', verbose_name='Orientation de la palette')),
                ('interpolate', models.BooleanField(default=True, help_text="Activer l'interpolation", verbose_name='Interpolation')),
                ('interpolation_method', models.CharField(choices=[('linear', 'Linéaire'), ('nearest', 'Voisin le plus proche'), ('cubic', 'Cubique')], default='linear', verbose_name="Méthode d'interpolation")),
                ('extrapolate', models.BooleanField(default=False, help_text="Activer l'extrapolatiin (Attention: il faut que l'interpolation soit désactivée", verbose_name='Extrapolation')),
                ('extrapolation_method', models.CharField(choices=[('multiquadric', 'Multiquadrique'), ('inverse', 'Inverse'), ('gaussian', 'Gaussienne'), ('linear', 'Linéaire'), ('cubic', 'Cubique'), ('quintic', 'Quintique'), ('thin_plate', 'Plaque mince')], default='linear', verbose_name="Méthode d'extrapolation")),
                ('show_color_fill', models.BooleanField(default=True, help_text='Afficher le remplissage coloré (contourf)', verbose_name='Afficher le remplissage coloré')),
                ('show_contour_lines', models.BooleanField(default=False, help_text='Afficher les isolignes de contour (contour)', verbose_name='Afficher les isolignes de contour')),
                ('contour_edgecolor', colorfield.fields.ColorField(default='#000000', help_text='Couleur des isolignes.', image_field=None, max_length=25, samples=None, verbose_name='Couleur des isolignes')),
                ('contour_linewidths', models.FloatField(default=0.8, help_text='Épaisseur des isolignes (0.1 à 3.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(3.0)], verbose_name='Épaisseur des isolignes')),
                ('contour_labelsize', models.PositiveIntegerField(default=5, help_text='Taille de police des étiquettes (3 à 20).', validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(20)], verbose_name='Taille de la police des étiquettes')),
                ('titre_carte', models.CharField(default='Carte de prévision', max_length=255, verbose_name='Titre de la carte')),
                ('titre_date', models.BooleanField(default=True, help_text='Afficher la date sous le titre.', verbose_name='Afficher la date')),
                ('titre_fontsize', models.PositiveIntegerField(default=14, help_text='Taille de police du titre (8 à 48).', validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(48)], verbose_name='Taille de la police du titre')),
                ('titre_pad', models.PositiveIntegerField(default=20, help_text='Marge verticale sous le titre (0 à 100 px).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Marge sous le titre')),
                ('titre_backgroundcolor', colorfield.fields.ColorField(default='#FFFFFF', help_text='Couleur de fond du titre.', image_field=None, max_length=25, samples=None, verbose_name='Couleur de fond du titre')),
                ('active', models.BooleanField(default=False, help_text='Activer cette configuration.', verbose_name='Activer')),
                ('symbole', models.CharField(choices=[('o', 'o'), ('.', '.'), (',', ','), ('x', 'x'), ('+', '+'), ('v', 'v'), ('^', '^'), ('<', '<'), ('>', '>'), ('s', 's'), ('p', 'p'), ('*', '*'), ('h', 'h'), ('H', 'H'), ('D', 'D'), ('d', 'd'), ('|', '|'), ('_', '_')], default='o', help_text='symbole utilisé pour représenter les localités', verbose_name='Symboles')),
                ('couleur_symbole', colorfield.fields.ColorField(default='#000000', help_text='Couleur des symboles.', image_field=None, max_length=25, samples=None, verbose_name='Couleur des symboles')),
                ('symbole_size', models.PositiveIntegerField(default=1, help_text='Taille des symboles (1 à 20).', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)], verbose_name='Taille des symboles')),
                ('couleur_text', colorfield.fields.ColorField(default='#000000', help_text='Couleur des étiquettes.', image_field=None, max_length=25, samples=None, verbose_name='Couleur des étiquettes')),
                ('text_labelsize', models.PositiveIntegerField(default=3, help_text='Taille de police des étiquettes (3 à 20).', validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(20)], verbose_name='Taille de la police des étiquettes')),
                ('symbole_station', models.CharField(choices=[('o', 'o'), ('.', '.'), (',', ','), ('x', 'x'), ('+', '+'), ('v', 'v'), ('^', '^'), ('<', '<'), ('>', '>'), ('s', 's'), ('p', 'p'), ('*', '*'), ('h', 'h'), ('H', 'H'), ('D', 'D'), ('d', 'd'), ('|', '|'), ('_', '_')], default='o', help_text='symbole utilisé pour représenter les stations', verbose_name='Symboles stations')),
                ('couleur_symbole_station', colorfield.fields.ColorField(default='#000000', help_text='Couleur des symboles.', image_field=None, max_length=25, samples=None, verbose_name='Couleur des symboles')),
                ('symbole_size_station', models.PositiveIntegerField(default=1, help_text='Taille des symboles (1 à 20).', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)], verbose_name='Taille des symboles')),
                ('couleur_text_station', colorfield.fields.ColorField(default='#000000', help_text='Couleur des étiquettes.', image_field=None, max_length=25, samples=None, verbose_name='Couleur des étiquettes')),
                ('text_labelsize_station', models.PositiveIntegerField(default=3, help_text='Taille de police des étiquettes (3 à 20).', validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(20)], verbose_name='Taille de la police des étiquettes')),
                ('source', models.CharField(choices=[('observation', 'Observation')], default='observation', help_text="Source d'observation", verbose_name='Palette de couleurs')),
                ('echeance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='EchMapSpa', to='bulletins.echeance', verbose_name='Echéance')),
                ('legend', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='legendMapSpatial', to='chartmet.legend', verbose_name='Légende Personnalisée')),
                ('localites', models.ManyToManyField(blank=True, help_text='Zones à afficher comme villes sur la carte', limit_choices_to={'category': 'ville'}, related_name='villes_map_spatial_configurations', to='forecast.zone', verbose_name='Villes affichées')),
                ('parametre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ParamMapSpa', to='forecast.variable', verbose_name='Paramètre')),
                ('stations', models.ManyToManyField(blank=True, help_text='Stations à afficher sur la carte', limit_choices_to={'active': True}, related_name='stations_map_spatial_configurations', to='observation.station', verbose_name='Stations affichées')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
