"""
Django settings for climforge project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
# Redirections après login/logout
LOGIN_REDIRECT_URL = '/'  # Après connexion réussie
LOGOUT_REDIRECT_URL = '/login/'  # Après déconnexion

# Protection des pages (exemple)
from django.urls import reverse_lazy
LOGIN_URL = reverse_lazy('login')  # Si @login_required est utilisé

# Application definition

INSTALLED_APPS = [
    "home",
    "search",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    ### added app####
    "django.contrib.gis",
    "widget_tweaks",
    'leaflet',
    'colorfield',
    'django_select2',
    "wagtail_color_panel",
    'dal',
    'dal_select2',
    'auditlog',


    ### installed app
    "administrate",
    "forecast",
    "observation",
    "bulletins",
    "chartmet",
    "meteowise",
    "dissiminate",
    "vigilance",
    "api",
    ### CAP EDIDOR
    # 'wagtailiconchooser',
    'wagtail.contrib.settings',
    # 'adminboundarymanager',
    'rest_framework' , 
    'wagtail.api.v2',
    'rest_framework.authtoken',
    'django_filters',
    'drf_spectacular',
    # 'rest_framework_xml' , 
    # 'capeditor' 
]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",


    'django.middleware.common.CommonMiddleware',  # Ensures Referer header
    'django.middleware.csrf.CsrfViewMiddleware',  # Also helps with headers

    'administrate.middleware.HandleViewErrorsMiddleware',

    'auditlog.middleware.AuditlogMiddleware',
]

SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

ROOT_URLCONF = "climforge.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(PROJECT_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "climforge.wsgi.application"


# REST_FRAMEWORK  =  { 
#     'DEFAULT_RENDERER_CLASSES' :  ( 
#         'rest_framework.renderers.JSONRenderer' , 
#         'rest_framework_xml.renderers.XMLRenderer' ,   # ajouter XMLRenderer 
#     ), 
#     'DEFAULT_PARSER_CLASSES' :  ( 
#         'rest_framework_xml.parsers.XMLParser' , 
#     ), 
# }

REST_FRAMEWORK = {
'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework_xml.renderers.XMLRenderer' ,   # ajouter XMLRenderer 
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # 'DEFAULT_PARSER_CLASSES' :  ( 
    #     'rest_framework_xml.parsers.XMLParser' , 
    # ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ], 
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',  # Limite pour les utilisateurs anonymes
        'user': '100/min'   # Limite pour les utilisateurs authentifiés
    },
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ]
}

SPECTACULAR_SETTINGS = {
    'PREPROCESSING_HOOKS': [
        'api.schema_hooks.exclude_wagtail_admin_views',
    ],
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    # },
    "default":{
        # 'ENGINE': 'django.db.backends.postgresql',
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'climforge',
        'USER': 'user',
        'PASSWORD': 'xB9#qT7!vLz@W2pM',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

LEAFLET_CONFIG = {
    'DEFAULT_CENTER': (12.72, -1.57),
    'DEFAULT_ZOOM': 5,
    'RESPONSIVE': True,
    'SCALE': 'metric',
    'ATTRIBUTION_PREFIX': 'ANAM © OpenStreetMap',
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr'
USE_I18N = True  # Activation de l'internationalisation
USE_L10N = True  # Activation de la localisation

TIME_ZONE = "UTC"


USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static_src"),
]

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Default storage settings, with the staticfiles storage updated.
# See https://docs.djangoproject.com/en/5.2/ref/settings/#std-setting-STORAGES
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    # ManifestStaticFilesStorage is recommended in production, to prevent
    # outdated JavaScript / CSS assets being served from cache
    # (e.g. after a Wagtail upgrade).
    # See https://docs.djangoproject.com/en/5.2/ref/contrib/staticfiles/#manifeststaticfilesstorage
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.ManifestStaticFilesStorage",
    },
}

# Django sets a maximum of 1000 fields per form by default, but particularly complex page models
# can exceed this limit within Wagtail's page editor.
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10_000


# Wagtail settings

WAGTAIL_SITE_NAME = "climforge"

# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
WAGTAILADMIN_BASE_URL = "http://example.com"



# import environ
# # Initialise django-environ
# env = environ.Env()
# environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# # Email settings
# EMAIL_BACKEND = env('EMAIL_BACKEND')
# EMAIL_HOST = env('EMAIL_HOST')
# EMAIL_PORT = env.int('EMAIL_PORT')
# EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')
# EMAIL_HOST_USER = env('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

WAGTAILADMIN_RICH_TEXT_EDITORS = {
    'default': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': [
                'bold', 'italic', 'strikethrough',
                'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
                'blockquote', 'ol', 'ul',
                'link', 'document-link', 'image', 'embed',
                'code', 'superscript', 'subscript',
                'hr',
            ]
        }
    },
    
    'basic': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': [
                'bold', 'italic',
                'h2', 'h3',
                'ol', 'ul',
                'link',
            ]
        }
    },
    
    'minimal': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': [
                'bold', 'italic', 'link'
            ]
        }
    },
    
    # Éditeur personnalisé pour du texte simple
    'simple': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': [
                'bold', 'italic',
                'h2', 'h3',
                'ol', 'ul',
                'link'
            ]
        }
    },
    
    # Éditeur pour articles complets
    'full': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': [
                'bold', 'italic', 'strikethrough',
                'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
                'blockquote', 'ol', 'ul',
                'link', 'document-link', 'image', 'embed',
                'code', 'superscript', 'subscript',
                'hr', 'table',
            ]
        }
    },
    
    # Éditeur sans images ni médias
    'text-only': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': [
                'bold', 'italic',
                'h2', 'h3', 'h4',
                'blockquote', 'ol', 'ul',
                'link', 'code'
            ]
        }
    }
}

# Allowed file extensions for documents in the document library.
# This can be omitted to allow all files, but note that this may present a security risk
# if untrusted users are allowed to upload files -
# see https://docs.wagtail.org/en/stable/advanced_topics/deploying.html#user-uploaded-files
WAGTAILDOCS_EXTENSIONS = ['csv', 'docx', 'key', 'odt', 'pdf', 'pptx', 'rtf', 'txt', 'xlsx', 'zip']

GDAL_LIBRARY_PATH = '/lib/libgdal.so'
GDAL_LIBRARY_PATH = '/usr/lib/x86_64-linux-gnu/libgdal.so.34'


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

###### My varibales #######
ICONES_WEATHER = ["None","clearsky_day","clearsky_night","clearsky_polartwilight","cloudy","fair_day","fair_night",
        "fair_polartwilight","fog","heavyrain","heavyrainandthunder","heavyrainshowers_day","heavyrainshowers_night",
        "heavyrainshowers_polartwilight","heavyrainshowersandthunder_day","heavyrainshowersandthunder_night",
        "heavyrainshowersandthunder_polartwilight","heavysleet","heavysleetandthunder","heavysleetshowers_day",
        "heavysleetshowers_night","heavysleetshowers_polartwilight","heavysleetshowersandthunder_day",
        "heavysleetshowersandthunder_night","heavysleetshowersandthunder_polartwilight","heavysnow",
        "heavysnowandthunder","heavysnowshowers_day","heavysnowshowers_night","heavysnowshowers_polartwilight",
        "heavysnowshowersandthunder_day","heavysnowshowersandthunder_night","heavysnowshowersandthunder_polartwilight","lightrain",
        "lightrainandthunder","lightrainshowers_day","lightrainshowers_night","lightrainshowers_polartwilight","lightrainshowersandthunder_day",
        "lightrainshowersandthunder_night","lightrainshowersandthunder_polartwilight","lightsleet","lightsleetandthunder",
        "lightsleetshowers_day","lightsleetshowers_night","lightsleetshowers_polartwilight","lightsleetshowersandthunder_day",
        "lightsleetshowersandthunder_night","lightsleetshowersandthunder_polartwilight","lightsnow","lightsnowandthunder",
        "lightsnowshowers_day","lightsnowshowers_night","lightsnowshowers_polartwilight","lightsnowshowersandthunder_day",
        "lightsnowshowersandthunder_night","lightsnowshowersandthunder_polartwilight","np","partlycloudy_day","partlycloudy_night",
        "partlycloudy_polartwilight","rain","rainandthunder","rainshowers_day","rainshowers_night","rainshowers_polartwilight",
        "rainshowersandthunder_day","rainshowersandthunder_night","rainshowersandthunder_polartwilight","sleet","sleetandthunder",
        "sleetshowers_day","sleetshowers_night","sleetshowers_polartwilight","sleetshowersandthunder_day","sleetshowersandthunder_night",
        "sleetshowersandthunder_polartwilight","snow","snowandthunder","snowshowers_day","snowshowers_night","snowshowers_polartwilight",
        "snowshowersandthunder_day","snowshowersandthunder_night","snowshowersandthunder_polartwilight"]
